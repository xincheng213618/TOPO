using System;
using System.IO;
using System.IO.Compression;
using System.Diagnostics;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Drawing.Printing;
using System.Xml;
using ECRService.ReportServiceReference;
using ECRLibrary;

namespace ECRService
{
    /// <summary>
    /// ReportViewPage.xaml 的交互逻辑
    /// </summary>
    public partial class ReportViewPage : Page
    {
        private const int TIMEOUT = 30;
        private int countdown = TIMEOUT;
        private DispatcherTimer pageTimer = null;

        private Page returnPage = null;
        private string identifier = null;
        private ReportItem item = null;
        ObservableCollection<ReportItem> items = ServiceData.data as ObservableCollection<ReportItem>;

        private CancellationTokenSource tokenSource = new CancellationTokenSource();
        private List<BitmapImage> images = new List<BitmapImage>();
        private int currentInsertPage = 1;
        private int currentViewPage = 1;

        public ReportViewPage(ReportListPage returnPage, string identifier)
        {
            this.returnPage = returnPage;
            this.identifier = identifier;
 
            InitializeComponent();

            pageTimer = new DispatcherTimer()
            {
                IsEnabled = false,
                Interval = TimeSpan.FromSeconds(1),
            };
            pageTimer.Tick += new EventHandler((sender, e) =>
            {
                if (--countdown <= 0)
                {
                    pageTimer.IsEnabled = false;
                    (returnPage as ReportListPage).ResetTimer();
                    Dispatcher.BeginInvoke(new Action(() => (Application.Current.MainWindow as MainWindow).frame.Navigate(returnPage)));
                }

                if (countdown % 15 == 0)
                {
                    media.Source = new Uri(Directory.GetCurrentDirectory() + "/Media/7、取走身份证和报告.mp3", UriKind.Absolute);
                    media.Position = TimeSpan.Zero;
                    media.Play();
                }

                timerLabel.Content = countdown.ToString();
            });
            pageTimer.IsEnabled = true;
        }

        private void Page_Initialized(object sender, EventArgs e)
        {
            for (int i = 0; i < items.Count; i++)
            {
                if (items[i].Identifier.Equals(identifier))
                {
                    item = items[i];
                    break;
                }
            }

            AxAcroPDFLib.AxAcroPDF pdfControl = new AxAcroPDFLib.AxAcroPDF();
            pdfControl.BeginInit();
            formsHost.Child = pdfControl;
            pdfControl.EndInit();

            hintLabel.Content = $"正在下载企业信用报告，序号:{identifier}";

            Thread worker = new Thread(() => DownloadReportThreadProc());
            worker.Start();
        }

        private void ConvertPDFToImageProc()
        {
            try
            {
                Process proc = new Process();
                proc.StartInfo.CreateNoWindow = true;
                proc.StartInfo.FileName = "gswin64c";
                proc.StartInfo.Arguments = $"-dQUIET -dNOSAFER -r300 -dBATCH -sDEVICE=pnggray -dNOPAUSE -dNOPROMPT -sOutputFile={identifier}_%d.png {identifier}.pdf";
                proc.StartInfo.CreateNoWindow = true;
                proc.StartInfo.UseShellExecute = false;
                proc.StartInfo.RedirectStandardError = true;
                proc.StartInfo.RedirectStandardInput = false;
                proc.StartInfo.RedirectStandardOutput = true;
                proc.StartInfo.WindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden;
                proc.Start();
                proc.BeginErrorReadLine();
                proc.BeginOutputReadLine();
                proc.WaitForExit();
            }
            catch (Exception ex)
            {
                Dispatcher.BeginInvoke(new Action(() =>
                {
                    pageTimer.IsEnabled = false;
                    (Application.Current.MainWindow as MainWindow).frame.Navigate(new MessagePage(ex.Message));
                }));
            }
            finally
            {
                tokenSource.Cancel();
            }
        }

        private BitmapImage MemoryStreamBitmapImage(string filename)
        {
            BitmapImage bitmapImage = null;

            try
            {
                using (var stream = File.Open(filename, FileMode.Open))
                {
                    byte[] buffer = new byte[stream.Length];
                    stream.Read(buffer, 0, (int)stream.Length);
                    bitmapImage = new BitmapImage();
                    bitmapImage.BeginInit();
                    bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                    bitmapImage.StreamSource = new MemoryStream(buffer);
                    bitmapImage.EndInit();
                }
            }
            catch (Exception ex)
            {
                bitmapImage = null;
            }

            return bitmapImage;
        }

        private void InsertPage()
        {
            images.Add(MemoryStreamBitmapImage($"{identifier}_{currentInsertPage}.png"));

            if (currentInsertPage == 1)
            {
                reportView.Source = images[0];
            }
            else
                next.Visibility = Visibility.Visible;

            currentInsertPage++;
        }

        private void WatchProc(CancellationToken token)
        {
            int page = 1;

            while (true)
            {
                Thread.Sleep(100);

                if (File.Exists($"{identifier}_{page + 1}.png"))
                {
                    Dispatcher.BeginInvoke(new Action(() => InsertPage()));
                    page++;
                }

                if (token.IsCancellationRequested)
                {
                    Dispatcher.BeginInvoke(new Action(() => InsertPage()));
                    break;
                }
            }
        }

        private void DownloadReportCompleted()
        {
            hintLabel.Content = null;
            hintPanel.Visibility = Visibility.Hidden;
            if (item.IsNotPrinted)
                printButton.Visibility = Visibility.Visible;
            else
                printButton.Visibility = Visibility.Hidden;
            returnButton.Visibility = Visibility.Visible;

            if (!File.Exists($"{identifier}_1.png"))
            {
                Thread convertWorker = new Thread(() => ConvertPDFToImageProc());
                convertWorker.Start();

                Thread watchWorker = new Thread(() => WatchProc(tokenSource.Token));
                watchWorker.Start();
            }
            else
            {
                for (; File.Exists($"{identifier}_{currentInsertPage}.png"); currentInsertPage++)
                    images.Add(MemoryStreamBitmapImage($"{identifier}_{currentInsertPage}.png"));

                reportView.Source = images[0];
                if (images.Count > 1)
                    next.Visibility = Visibility.Visible;
            }
        }

        private void DownloadReportThreadProc()
        {
            if (!File.Exists($"{identifier}.pdf"))
            {
                try
                {
                    System.ServiceModel.BasicHttpBinding binding = new System.ServiceModel.BasicHttpBinding();
                    binding.MaxReceivedMessageSize = 16777216;
                    binding.SendTimeout = TimeSpan.FromSeconds(30);
                    binding.ReceiveTimeout = TimeSpan.FromSeconds(30);
                    System.ServiceModel.EndpointAddress endpointAddress = new System.ServiceModel.EndpointAddress(GlobalData.configData.ServerURL);
                    ReportService reportService = new ReportServiceClient(binding, endpointAddress);

                    string response = reportService.getreport(GlobalData.configData.LoginName, GlobalData.configData.LoginPassword, identifier, "", "1");

                    XmlDocument document = new XmlDocument();
                    document.LoadXml(response);

                    string returncode = document.SelectSingleNode("//data/returncode").InnerText;
                    string returnmsg = document.SelectSingleNode("//data/returnmsg").InnerText;
                    if (returncode.CompareTo("1") == 0)
                    {
                        string report = document.SelectSingleNode("//data/result/report/content").InnerText;
                        byte[] zip = Convert.FromBase64String(report);

                        using (Stream stream = new MemoryStream(zip))
                        {
                            using (ZipArchive archive = new ZipArchive(stream, ZipArchiveMode.Read))
                            {
                                ZipFileExtensions.ExtractToDirectory(archive, ".");
                            }
                        }
                    }
                    else if (returncode.CompareTo("0") == 0)
                    {
                        Dispatcher.BeginInvoke(new Action(() => {
                            pageTimer.IsEnabled = false;
                            (Application.Current.MainWindow as MainWindow).frame.Navigate(new MessagePage(returnmsg));
                        }));
                    }
                    else if (returncode.CompareTo("e") == 0)
                    {
                        throw new Exception(returnmsg);
                    }
                }
                catch (Exception ex)
                {
                    Dispatcher.BeginInvoke(new Action(() =>
                    {
                        pageTimer.IsEnabled = false;
                        (Application.Current.MainWindow as MainWindow).frame.Navigate(new MessagePage(ex.Message));
                    }));
                }
            }

            Dispatcher.BeginInvoke(new Action(() => DownloadReportCompleted()));
        }

        private void Print_Click(object sender, RoutedEventArgs e)
        {
            AxAcroPDFLib.AxAcroPDF pdfControl = formsHost.Child as AxAcroPDFLib.AxAcroPDF;
            pdfControl.LoadFile($"{identifier}.pdf");
            Dispatcher.BeginInvoke(new Action(() => pdfControl.printAll()));

            //item.IsSelected = false;
            item.IsNotPrinted = false;
            ((ReportListPage)returnPage).UpdatePrintedItem();
            printButton.Visibility = Visibility.Hidden;

            /*
            System.ServiceModel.BasicHttpBinding binding = new System.ServiceModel.BasicHttpBinding();
            binding.MaxReceivedMessageSize = 16777216;
            binding.SendTimeout = TimeSpan.FromSeconds(30);
            binding.ReceiveTimeout = TimeSpan.FromSeconds(30);
            System.ServiceModel.EndpointAddress endpointAddress = new System.ServiceModel.EndpointAddress(GlobalData.configData.ServerURL);
            ReportService reportService = new ReportServiceClient(binding, endpointAddress);

            reportService.updatereportstatus(GlobalData.configData.LoginName, GlobalData.configData.LoginPassword, identifier);
            */

            media.Source = new Uri(Directory.GetCurrentDirectory() + "/Media/7、取走身份证和报告.mp3", UriKind.Absolute);
            media.Position = TimeSpan.Zero;
            media.Play();

            /*
            pageTimer.IsEnabled = false;
            timerLabel.Visibility = Visibility.Hidden;

            pageTimer = new DispatcherTimer()
            {
                IsEnabled = false,
                Interval = TimeSpan.FromSeconds(5),
            };
            pageTimer.Tick += new EventHandler((s, ev) =>
            {
                pageTimer.IsEnabled = false;
                Dispatcher.BeginInvoke(new Action(() => (Application.Current.MainWindow as MainWindow).frame.Navigate(returnPage)));
            });
            pageTimer.IsEnabled = true;*/
        }

        private void Return_Click(object sender, RoutedEventArgs e)
        {
            (returnPage as ReportListPage).ResetTimer();
            pageTimer.IsEnabled = false;
            Dispatcher.BeginInvoke(new Action(() => (Application.Current.MainWindow as MainWindow).frame.Navigate(returnPage)));
        }

        private void Previous_Click(object sender, RoutedEventArgs e)
        {
            currentViewPage--;
            reportView.Source = images[currentViewPage - 1];

            if (currentViewPage == 1)
                previous.Visibility = Visibility.Hidden;
            next.Visibility = Visibility.Visible;
            countdown = TIMEOUT;
        }

        private void Next_Click(object sender, RoutedEventArgs e)
        {
            currentViewPage++;
            reportView.Source = images[currentViewPage - 1];

            if (currentViewPage == images.Count)
                next.Visibility = Visibility.Hidden;
            previous.Visibility = Visibility.Visible;
            countdown = TIMEOUT;
        }
    }
}
